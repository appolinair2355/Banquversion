import os
import asyncio
import re
import json
import zipfile
import tempfile
import shutil
import logging
import sys
from datetime import datetime
from telethon import TelegramClient, events
from telethon.events import ChatAction
from dotenv import load_dotenv
from predictor import CardPredictor
from scheduler import PredictionScheduler
from yaml_manager import init_database, db
from aiohttp import web
import threading

# Configuration du logging d√©taill√© pour Render.com
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('render_bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# --- CONFIGURATION ---
try:
    API_ID = int(os.getenv('API_ID') or '0')
    API_HASH = os.getenv('API_HASH') or ''
    BOT_TOKEN = os.getenv('BOT_TOKEN') or ''
    ADMIN_ID = int(os.getenv('ADMIN_ID') or '0')
    PORT = int(os.getenv('PORT') or '10000')

    # Validation des variables requises
    if not API_ID or API_ID == 0:
        raise ValueError("API_ID manquant ou invalide")
    if not API_HASH:
        raise ValueError("API_HASH manquant")
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN manquant")

    print(f"‚úÖ Configuration charg√©e: API_ID={API_ID}, ADMIN_ID={ADMIN_ID}, PORT={PORT}")
except Exception as e:
    print(f"‚ùå Erreur configuration: {e}")
    print("V√©rifiez vos variables d'environnement")
    exit(1)

# Fichier de configuration persistante
CONFIG_FILE = 'bot_config.json'

# Variables d'√©tat
detected_stat_channel = None
detected_display_channel = None
confirmation_pending = {}
prediction_interval = 1  # Intervalle en minutes avant de chercher "A" (d√©faut: 1 min - RAPIDE)
cooldown_interval = 5   # Intervalle en secondes avant re-v√©rification des r√®gles (d√©faut: 5 sec - TR√àS RAPIDE)
last_rule_check = None  # Timestamp de la derni√®re v√©rification des r√®gles

def load_config():
    """Load configuration with priority: JSON > Database"""
    global detected_stat_channel, detected_display_channel, prediction_interval, cooldown_interval
    try:
        # Toujours essayer JSON en premier (source de v√©rit√©)
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
                detected_stat_channel = config.get('stat_channel')
                detected_display_channel = config.get('display_channel')
                prediction_interval = config.get('prediction_interval', 5)
                cooldown_interval = config.get('cooldown_interval', 30)
                print(f"‚úÖ Configuration charg√©e depuis JSON: Stats={detected_stat_channel}, Display={detected_display_channel}, Intervalle={prediction_interval}min, Cooldown={cooldown_interval}sec")
                return

        # Fallback sur base de donn√©es si JSON n'existe pas
        if db:
            detected_stat_channel = db.get_config('stat_channel')
            detected_display_channel = db.get_config('display_channel')
            interval_config = db.get_config('prediction_interval')
            cooldown_config = db.get_config('cooldown_interval')
            if detected_stat_channel:
                detected_stat_channel = int(detected_stat_channel)
            if detected_display_channel:
                detected_display_channel = int(detected_display_channel)
            if interval_config:
                prediction_interval = int(interval_config)
            if cooldown_config:
                cooldown_interval = int(cooldown_config)
            print(f"‚úÖ Configuration charg√©e depuis la DB: Stats={detected_stat_channel}, Display={detected_display_channel}, Intervalle={prediction_interval}min, Cooldown={cooldown_interval}sec")
        else:
            print("‚ÑπÔ∏è Aucune configuration trouv√©e, nouvelle configuration")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur chargement configuration: {e}")
        # Valeurs par d√©faut en cas d'erreur
        detected_stat_channel = None
        detected_display_channel = None
        prediction_interval = 5
        cooldown_interval = 30

def save_config():
    """Save configuration to database and JSON backup"""
    try:
        if db:
            # Sauvegarde en base de donn√©es
            db.set_config('stat_channel', detected_stat_channel)
            db.set_config('display_channel', detected_display_channel)
            db.set_config('prediction_interval', prediction_interval)
            db.set_config('cooldown_interval', cooldown_interval)
            print("üíæ Configuration sauvegard√©e en base de donn√©es")

        # Sauvegarde JSON de secours
        config = {
            'stat_channel': detected_stat_channel,
            'display_channel': detected_display_channel,
            'prediction_interval': prediction_interval,
            'cooldown_interval': cooldown_interval
        }
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2)
        print(f"üíæ Configuration sauvegard√©e: Stats={detected_stat_channel}, Display={detected_display_channel}, Intervalle={prediction_interval}min, Cooldown={cooldown_interval}sec")
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde configuration: {e}")

def update_channel_config(source_id: int, target_id: int):
    """Update channel configuration"""
    global detected_stat_channel, detected_display_channel
    detected_stat_channel = source_id
    detected_display_channel = target_id
    save_config()

# Initialize database
database = init_database()

# Gestionnaire de pr√©dictions (sera mis √† jour avec yaml_manager apr√®s initialisation)
predictor = CardPredictor()

# Planificateur automatique
scheduler = None

# Initialize Telegram client with unique session name
import time
session_name = f'bot_session_{int(time.time())}'
client = TelegramClient(session_name, API_ID, API_HASH)

async def start_bot():
    """Start the bot with proper error handling"""
    try:
        logger.info("üöÄ D√âMARRAGE DU BOT - Configuration en cours...")

        # Load saved configuration first
        load_config()
        logger.info(f"‚úÖ Configuration charg√©e - Cooldown: {cooldown_interval}s, Intervalle: {prediction_interval}min")

        # Connecter le yaml_manager au predictor
        predictor.set_yaml_manager(database)
        logger.info("üîó Predictor connect√© au gestionnaire YAML")

        await client.start(bot_token=BOT_TOKEN)
        logger.info("‚úÖ Bot Telegram connect√© avec succ√®s")

        # Auto-d√©marrage du scheduler si les canaux sont configur√©s
        global scheduler
        if detected_stat_channel and detected_display_channel and not scheduler:
            scheduler = PredictionScheduler(
                client, predictor,
                detected_stat_channel, detected_display_channel
            )
            # D√©marre le planificateur en arri√®re-plan
            asyncio.create_task(scheduler.run_scheduler())
            logger.info("ü§ñ Planificateur automatique d√©marr√© au lancement du bot")
            logger.info(f"üìä Surveillance ACTIVE: Canal {detected_stat_channel} ‚Üí Canal {detected_display_channel}")
        else:
            logger.warning("‚ö†Ô∏è Scheduler non d√©marr√© - canaux non configur√©s ou d√©j√† actif")

        # Get bot info
        me = await client.get_me()
        username = getattr(me, 'username', 'Unknown') or f"ID:{getattr(me, 'id', 'Unknown')}"
        logger.info(f"‚úÖ Bot op√©rationnel: @{username}")

    except Exception as e:
        logger.error(f"‚ùå Erreur critique lors du d√©marrage: {e}")
        return False

    return True

# --- INVITATION / CONFIRMATION ---
@client.on(events.ChatAction())
async def handler_join(event):
    """Handle bot joining channels/groups"""
    global confirmation_pending

    try:
        print(f"ChatAction event: {event}")
        print(f"user_joined: {event.user_joined}, user_added: {event.user_added}")
        print(f"user_id: {event.user_id}, chat_id: {event.chat_id}")

        if event.user_joined or event.user_added:
            me = await client.get_me()
            me_id = getattr(me, 'id', None)
            print(f"Mon ID: {me_id}, Event user_id: {event.user_id}")

            if event.user_id == me_id:
                # Normaliser l'ID du canal pour corriger les probl√®mes d'affichage
                channel_id = event.chat_id
                original_id = channel_id

                # Correction pour les IDs de supergroups/channels mal format√©s
                if str(channel_id).startswith('-207') and len(str(channel_id)) == 14:
                    # Convertir -207XXXXXXXXX vers -100XXXXXXXXX
                    channel_id = int('-100' + str(channel_id)[4:])
                    print(f"üîß ID canal corrig√©: {original_id} ‚Üí {channel_id}")

                # √âviter les doublons : v√©rifier si ce canal (normalis√©) est d√©j√† en attente
                if channel_id in confirmation_pending:
                    print(f"‚ö†Ô∏è Canal {channel_id} d√©j√† en attente de configuration, √©v√©nement {original_id} ignor√©")
                    return

                confirmation_pending[channel_id] = 'waiting_confirmation'

                # Get channel info
                try:
                    chat = await client.get_entity(channel_id)
                    chat_title = getattr(chat, 'title', f'Canal {channel_id}')
                except:
                    chat_title = f'Canal {channel_id}'

                # Send private invitation to admin
                invitation_msg = f"""üîî **Nouveau canal d√©tect√©**

üìã **Canal** : {chat_title}
üÜî **ID** : {channel_id}

**Choisissez le type de canal** :
‚Ä¢ `/set_stat {channel_id}` - Canal de statistiques
‚Ä¢ `/set_display {channel_id}` - Canal de diffusion

Envoyez votre choix en r√©ponse √† ce message."""

                try:
                    await client.send_message(ADMIN_ID, invitation_msg)
                    print(f"Invitation envoy√©e √† l'admin pour le canal: {chat_title} ({event.chat_id})")
                except Exception as e:
                    print(f"Erreur envoi invitation priv√©e: {e}")
                    # Fallback: send to the channel temporarily for testing
                    await client.send_message(event.chat_id, f"‚ö†Ô∏è Impossible d'envoyer l'invitation priv√©e. Canal ID: {event.chat_id}")
                    print(f"Message fallback envoy√© dans le canal {event.chat_id}")
    except Exception as e:
        print(f"Erreur dans handler_join: {e}")

@client.on(events.NewMessage(pattern=r'/set_stat (-?\d+)'))
async def set_stat_channel(event):
    """Set statistics channel (only admin in private)"""
    global detected_stat_channel, confirmation_pending

    try:
        # Only allow in private chat with admin
        if event.is_group or event.is_channel:
            return

        if event.sender_id != ADMIN_ID:
            await event.respond("‚ùå Seul l'administrateur peut configurer les canaux")
            return

        # Extract channel ID from command
        match = event.pattern_match
        channel_id = int(match.group(1))

        # Check if channel is waiting for confirmation
        if channel_id not in confirmation_pending:
            await event.respond("‚ùå Ce canal n'est pas en attente de configuration")
            return

        detected_stat_channel = channel_id
        confirmation_pending[channel_id] = 'configured_stat'

        # Save configuration
        save_config()

        try:
            chat = await client.get_entity(channel_id)
            chat_title = getattr(chat, 'title', f'Canal {channel_id}')
        except:
            chat_title = f'Canal {channel_id}'

        await event.respond(f"‚úÖ **Canal de statistiques configur√©**\nüìã {chat_title}\n\n‚ú® Le bot surveillera ce canal pour les pr√©dictions - d√©velopp√© par Sossou Kouam√© Appolinaire\nüíæ Configuration sauvegard√©e automatiquement")
        print(f"Canal de statistiques configur√©: {channel_id}")

    except Exception as e:
        print(f"Erreur dans set_stat_channel: {e}")

@client.on(events.NewMessage(pattern=r'/set_display (-?\d+)'))
async def set_display_channel(event):
    """Set display channel (only admin in private)"""
    global detected_display_channel, confirmation_pending

    try:
        # Only allow in private chat with admin
        if event.is_group or event.is_channel:
            return

        if event.sender_id != ADMIN_ID:
            await event.respond("‚ùå Seul l'administrateur peut configurer les canaux")
            return

        # Extract channel ID from command
        match = event.pattern_match
        channel_id = int(match.group(1))

        # Check if channel is waiting for confirmation
        if channel_id not in confirmation_pending:
            await event.respond("‚ùå Ce canal n'est pas en attente de configuration")
            return

        detected_display_channel = channel_id
        confirmation_pending[channel_id] = 'configured_display'

        # Save configuration
        save_config()

        try:
            chat = await client.get_entity(channel_id)
            chat_title = getattr(chat, 'title', f'Canal {channel_id}')
        except:
            chat_title = f'Canal {channel_id}'

        await event.respond(f"‚úÖ **Canal de diffusion configur√©**\nüìã {chat_title}\n\nüöÄ Le bot publiera les pr√©dictions dans ce canal - d√©velopp√© par Sossou Kouam√© Appolinaire\nüíæ Configuration sauvegard√©e automatiquement")
        print(f"Canal de diffusion configur√©: {channel_id}")

    except Exception as e:
        print(f"Erreur dans set_display_channel: {e}")

# --- COMMANDES DE BASE ---
@client.on(events.NewMessage(pattern='/start'))
async def start_command(event):
    """Send welcome message when user starts the bot"""
    try:
        welcome_msg = """üéØ **Bot de Pr√©diction de Cartes - Bienvenue !**

üîπ **D√©velopp√© par Sossou Kouam√© Appolinaire**

**Fonctionnalit√©s** :
‚Ä¢ Pr√©dictions automatiques anticip√©es (d√©clench√©es sur As dans premier groupe)
‚Ä¢ Pr√©dictions pour les prochains jeux
‚Ä¢ V√©rification des r√©sultats avec statuts d√©taill√©s (‚úÖ0Ô∏è‚É£, ‚úÖ1Ô∏è‚É£, ‚úÖ2Ô∏è‚É£, ‚úÖ3Ô∏è‚É£, ‚ùå)

**Configuration** :
1. Ajoutez-moi dans vos canaux
2. Je vous enverrai automatiquement une invitation priv√©e
3. R√©pondez avec `/set_stat [ID]` ou `/set_display [ID]`

**Commandes** :
‚Ä¢ `/start` - Ce message
‚Ä¢ `/status` - √âtat du bot (admin)
‚Ä¢ `/intervalle` - Configure le d√©lai de pr√©diction (admin)
‚Ä¢ `/sta` - Statut des d√©clencheurs (admin)
‚Ä¢ `/reset` - R√©initialiser (admin)
‚Ä¢ `/deploy` - Pack de d√©ploiement (admin)

Le bot est pr√™t √† analyser vos jeux ! üöÄ"""

        await event.respond(welcome_msg)
        print(f"Message de bienvenue envoy√© √† l'utilisateur {event.sender_id}")

        # Test message private pour v√©rifier la connectivit√©
        if event.sender_id == ADMIN_ID:
            await asyncio.sleep(2)
            test_msg = "üîß Test de connectivit√© : Je peux vous envoyer des messages priv√©s !"
            await event.respond(test_msg)

    except Exception as e:
        print(f"Erreur dans start_command: {e}")

# --- COMMANDES ADMINISTRATIVES ---
@client.on(events.NewMessage(pattern='/status'))
async def show_status(event):
    """Show bot status (admin only)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        config_status = "‚úÖ Sauvegard√©e" if os.path.exists(CONFIG_FILE) else "‚ùå Non sauvegard√©e"
        status_msg = f"""üìä **Statut du Bot**

Canal statistiques: {'‚úÖ Configur√©' if detected_stat_channel else '‚ùå Non configur√©'} ({detected_stat_channel})
Canal diffusion: {'‚úÖ Configur√©' if detected_display_channel else '‚ùå Non configur√©'} ({detected_display_channel})
‚è±Ô∏è Intervalle de pr√©diction: {prediction_interval} minutes
‚è≥ Cooldown de v√©rification: {cooldown_interval} secondes
Configuration persistante: {config_status}
Pr√©dictions actives: {len(predictor.prediction_status)}
Derni√®res pr√©dictions: {len(predictor.last_predictions)}
"""
        await event.respond(status_msg)
    except Exception as e:
        print(f"Erreur dans show_status: {e}")

@client.on(events.NewMessage(pattern='/reset'))
async def reset_data(event):
    """R√©initialisation des donn√©es (admin uniquement)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        # R√©initialiser les pr√©dictions en attente
        pending_predictions.clear()

        # R√©initialiser les donn√©es YAML
        await yaml_manager.reset_all_data()

        msg = """üîÑ **Donn√©es r√©initialis√©es avec succ√®s !**

‚úÖ Pr√©dictions en attente: vid√©es
‚úÖ Base de donn√©es YAML: r√©initialis√©e
‚úÖ Configuration: pr√©serv√©e

Le bot est pr√™t pour un nouveau cycle."""

        await event.respond(msg)
        print(f"Donn√©es r√©initialis√©es par l'admin")

    except Exception as e:
        print(f"Erreur dans reset_data: {e}")
        await event.respond(f"‚ùå Erreur lors de la r√©initialisation: {e}")

@client.on(events.NewMessage(pattern='/ni'))
async def ni_command(event):
    """Commande /ni - Informations sur le syst√®me de pr√©diction"""
    try:
        # Utiliser les variables globales configur√©es
        stats_channel = detected_stat_channel or 'Non configur√©'
        display_channel = detected_display_channel or 'Non configur√©'

        # Compter les pr√©dictions actives depuis le predictor
        active_predictions = len([s for s in predictor.prediction_status.values() if s == '‚åõ'])

        msg = f"""üéØ **Syst√®me de Pr√©diction NI - Statut**

üìä **Configuration actuelle**:
‚Ä¢ Canal source: {stats_channel}
‚Ä¢ Canal affichage: {display_channel}
‚Ä¢ Pr√©dictions actives: {active_predictions}
‚Ä¢ Intervalle: {prediction_interval} minute(s)
‚Ä¢ Cooldown: {cooldown_interval} seconde(s)

üéÆ **Fonctionnalit√©s**:
‚Ä¢ D√©clenchement automatique sur As (A) dans premier groupe
‚Ä¢ V√©rification s√©quentielle avec offsets 0‚Üí1‚Üí2‚Üí3
‚Ä¢ Format: "üîµXXX üîµ3K: statut :‚è≥"

üîß **Commandes disponibles**:
‚Ä¢ `/set_stat [ID]` - Configurer canal source
‚Ä¢ `/set_display [ID]` - Configurer canal affichage
‚Ä¢ `/status` - Statut d√©taill√© du bot
‚Ä¢ `/reset` - R√©initialiser les donn√©es
‚Ä¢ `/intervalle [min]` - Configurer d√©lai
‚Ä¢ `/cooldown [sec]` - Configurer cooldown

‚úÖ **Bot op√©rationnel** - Version 2025"""

        await event.respond(msg)
        print(f"Commande /ni ex√©cut√©e par {event.sender_id}")

    except Exception as e:
        print(f"Erreur dans ni_command: {e}")
        await event.respond(f"‚ùå Erreur: {e}")


@client.on(events.NewMessage(pattern='/test_invite'))
async def test_invite(event):
    """Test sending invitation (admin only)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        # Test invitation message
        test_msg = f"""üîî **Test d'invitation**

üìã **Canal test** : Canal de test
üÜî **ID** : -1001234567890

**Choisissez le type de canal** :
‚Ä¢ `/set_stat -1001234567890` - Canal de statistiques
‚Ä¢ `/set_display -1001234567890` - Canal de diffusion

Ceci est un message de test pour v√©rifier les invitations."""

        await event.respond(test_msg)
        print(f"Message de test envoy√© √† l'admin")

    except Exception as e:
        print(f"Erreur dans test_invite: {e}")

@client.on(events.NewMessage(pattern='/sta'))
async def show_trigger_numbers(event):
    """Show current trigger numbers for automatic predictions"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        # Plus de trigger_numbers, nouveau syst√®me bas√© sur les J
        trigger_nums = ["UN SEUL J dans 2√®me groupe"]

        # Recharger la configuration pour √©viter les valeurs obsol√®tes
        load_config()

        msg = f"""üìä **Statut des D√©clencheurs Automatiques**

üéØ **Num√©ros d√©clencheurs**: {', '.join(map(str, trigger_nums))}

üìã **Fonctionnement**:
‚Ä¢ Le bot surveille les jeux avec num√©ros {', '.join(map(str, trigger_nums))}
‚Ä¢ Il pr√©dit automatiquement le prochain jeu
‚Ä¢ Format: "üîµXXX üîµ3K: statut :‚è≥"

üìà **Statistiques actuelles**:
‚Ä¢ Pr√©dictions actives: {len([s for s in predictor.prediction_status.values() if s == '‚åõ'])}
‚Ä¢ Canal stats configur√©: {'‚úÖ' if detected_stat_channel else '‚ùå'} ({detected_stat_channel or 'Aucun'})
‚Ä¢ Canal affichage configur√©: {'‚úÖ' if detected_display_channel else '‚ùå'} ({detected_display_channel or 'Aucun'})

üîß **Configuration actuelle**:
‚Ä¢ Stats: {detected_stat_channel if detected_stat_channel else 'Non configur√©'}
‚Ä¢ Display: {detected_display_channel if detected_display_channel else 'Non configur√©'}
‚Ä¢ Cooldown: {cooldown_interval} secondes"""

        await event.respond(msg)
        print(f"Statut des d√©clencheurs envoy√© √† l'admin")

    except Exception as e:
        print(f"Erreur dans show_trigger_numbers: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

# Commande /report supprim√©e selon demande utilisateur

# Handler /deploy supprim√© - remplac√© par le handler 2D unique

@client.on(events.NewMessage(pattern='/auto'))
async def quick_scheduler_start(event):
    """D√©marrage rapide du scheduler (admin uniquement)"""
    global scheduler
    try:
        if event.sender_id != ADMIN_ID:
            return

        if detected_stat_channel and detected_display_channel:
            if not scheduler or not scheduler.is_running:
                scheduler = PredictionScheduler(
                    client, predictor,
                    detected_stat_channel, detected_display_channel
                )
                # D√©marre le planificateur en arri√®re-plan
                asyncio.create_task(scheduler.run_scheduler())

                await event.respond(f"""üöÄ **SCHEDULER D√âMARR√â!**

üìä Configuration active:
‚Ä¢ Canal source: {detected_stat_channel}
‚Ä¢ Canal cible: {detected_display_channel}
‚Ä¢ Status: üü¢ ACTIF

ü§ñ Le bot g√©n√®re maintenant des pr√©dictions automatiques!""")

                print(f"‚úÖ Scheduler forc√© par commande /auto")
            else:
                await event.respond("‚ö†Ô∏è Scheduler d√©j√† actif!")
        else:
            await event.respond("‚ùå Canaux non configur√©s. Utilisez /set_stat et /set_display d'abord.")

    except Exception as e:
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/scheduler'))
async def manage_scheduler(event):
    """Gestion du planificateur automatique (admin uniquement)"""
    global scheduler
    try:
        if event.sender_id != ADMIN_ID:
            return

        # Parse command arguments
        message_parts = event.message.message.split()
        if len(message_parts) < 2:
            await event.respond("""ü§ñ **Commandes du Planificateur Automatique**

**Usage**: `/scheduler [commande]`

**Commandes disponibles**:
‚Ä¢ `start` - D√©marre le planificateur automatique
‚Ä¢ `stop` - Arr√™te le planificateur
‚Ä¢ `status` - Affiche le statut actuel
‚Ä¢ `generate` - G√©n√®re une nouvelle planification
‚Ä¢ `config [source_id] [target_id]` - Configure les canaux

**Exemple**: `/scheduler config -1001234567890 -1001987654321`""")
            return

        command = message_parts[1].lower()

        if command == "start":
            if not scheduler:
                if detected_stat_channel and detected_display_channel:
                    scheduler = PredictionScheduler(
                        client, predictor,
                        detected_stat_channel, detected_display_channel
                    )
                    # D√©marre le planificateur en arri√®re-plan
                    asyncio.create_task(scheduler.run_scheduler())
                    await event.respond("‚úÖ **Planificateur d√©marr√©**\n\nLe syst√®me de pr√©dictions automatiques est maintenant actif.")
                else:
                    await event.respond("‚ùå **Configuration manquante**\n\nVeuillez d'abord configurer les canaux source et cible avec `/set_stat` et `/set_display`.")
            else:
                await event.respond("‚ö†Ô∏è **Planificateur d√©j√† actif**\n\nUtilisez `/scheduler stop` pour l'arr√™ter.")

        elif command == "stop":
            if scheduler:
                scheduler.stop_scheduler()
                scheduler = None
                await event.respond("üõë **Planificateur arr√™t√©**\n\nLes pr√©dictions automatiques sont d√©sactiv√©es.")
            else:
                await event.respond("‚ÑπÔ∏è **Planificateur non actif**\n\nUtilisez `/scheduler start` pour le d√©marrer.")

        elif command == "status":
            if scheduler:
                status = scheduler.get_schedule_status()
                status_msg = f"""üìä **Statut du Planificateur**

üîÑ **√âtat**: {'üü¢ Actif' if status['is_running'] else 'üî¥ Inactif'}
üìã **Planification**:
‚Ä¢ Total de pr√©dictions: {status['total']}
‚Ä¢ Pr√©dictions lanc√©es: {status['launched']}
‚Ä¢ Pr√©dictions v√©rifi√©es: {status['verified']}
‚Ä¢ En attente: {status['pending']}

‚è∞ **Prochaine pr√©diction**: {status['next_launch'] or 'Aucune'}

üîß **Configuration**:
‚Ä¢ Canal source: {detected_stat_channel}
‚Ä¢ Canal cible: {detected_display_channel}"""
                await event.respond(status_msg)
            else:
                await event.respond("‚ÑπÔ∏è **Planificateur non configur√©**\n\nUtilisez `/scheduler start` pour l'activer.")

        elif command == "generate":
            if scheduler:
                scheduler.regenerate_schedule()
                await event.respond("üîÑ **Nouvelle planification g√©n√©r√©e**\n\nLa planification quotidienne a √©t√© r√©g√©n√©r√©e avec succ√®s.")
            else:
                # Cr√©e un planificateur temporaire pour g√©n√©rer
                temp_scheduler = PredictionScheduler(client, predictor, 0, 0)
                temp_scheduler.regenerate_schedule()
                await event.respond("‚úÖ **Planification g√©n√©r√©e**\n\nFichier `prediction.yaml` cr√©√©. Utilisez `/scheduler start` pour activer.")

        elif command == "config" and len(message_parts) >= 4:
            source_id = int(message_parts[2])
            target_id = int(message_parts[3])

            # Met √† jour la configuration globale
            update_channel_config(source_id, target_id)

            await event.respond(f"""‚úÖ **Configuration mise √† jour**

üì• **Canal source**: {source_id}
üì§ **Canal cible**: {target_id}

Utilisez `/scheduler start` pour activer le planificateur.""")

        else:
            await event.respond("‚ùå **Commande inconnue**\n\nUtilisez `/scheduler` sans param√®tre pour voir l'aide.")

    except Exception as e:
        print(f"Erreur dans manage_scheduler: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/schedule_info'))
async def schedule_info(event):
    """Affiche les informations d√©taill√©es de la planification (admin uniquement)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        if scheduler and scheduler.schedule_data:
            # Affiche les 10 prochaines pr√©dictions
            current_time = scheduler.get_current_time_slot()
            upcoming = []

            for numero, data in scheduler.schedule_data.items():
                if (not data["launched"] and
                    data["heure_lancement"] >= current_time):
                    upcoming.append((numero, data["heure_lancement"]))

            upcoming.sort(key=lambda x: x[1])
            upcoming = upcoming[:10]  # Limite √† 10

            msg = "üìÖ **Prochaines Pr√©dictions Automatiques**\n\n"
            for numero, heure in upcoming:
                msg += f"üîµ {numero} ‚Üí {heure}\n"

            if not upcoming:
                msg += "‚ÑπÔ∏è Aucune pr√©diction en attente pour aujourd'hui."

            await event.respond(msg)
        else:
            await event.respond("‚ùå **Aucune planification active**\n\nUtilisez `/scheduler generate` pour cr√©er une planification.")

    except Exception as e:
        print(f"Erreur dans schedule_info: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/intervalle'))
async def set_prediction_interval(event):
    """Configure l'intervalle avant que le syst√®me cherche 'A' (admin uniquement)"""
    global prediction_interval
    try:
        if event.sender_id != ADMIN_ID:
            return

        # Parse command arguments
        message_parts = event.message.message.split()

        if len(message_parts) < 2:
            await event.respond(f"""‚è±Ô∏è **Configuration de l'Intervalle de Pr√©diction**

**Usage**: `/intervalle [minutes]`

**Intervalle actuel**: {prediction_interval} minutes

**Description**:
D√©finit le temps d'attente en minutes avant que le syst√®me commence √† analyser les messages pour chercher la lettre 'A' dans les parenth√®ses et d√©clencher les pr√©dictions.

**Exemples**:
‚Ä¢ `/intervalle 3` - Attendre 3 minutes
‚Ä¢ `/intervalle 10` - Attendre 10 minutes
‚Ä¢ `/intervalle 1` - Attendre 1 minute

**Recommand√©**: Entre 1 et 15 minutes""")
            return

        try:
            new_interval = int(message_parts[1])
            if new_interval < 1 or new_interval > 60:
                await event.respond("‚ùå **Erreur**: L'intervalle doit √™tre entre 1 et 60 minutes")
                return

            old_interval = prediction_interval
            prediction_interval = new_interval

            # Sauvegarder la configuration
            save_config()

            await event.respond(f"""‚úÖ **Intervalle mis √† jour**

‚è±Ô∏è **Ancien intervalle**: {old_interval} minutes
‚è±Ô∏è **Nouvel intervalle**: {prediction_interval} minutes

Le syst√®me attendra maintenant {prediction_interval} minute(s) avant de commencer l'analyse des messages pour la d√©tection des 'A' dans les parenth√®ses.

Configuration sauvegard√©e automatiquement.""")

            print(f"‚úÖ Intervalle de pr√©diction mis √† jour: {old_interval} ‚Üí {prediction_interval} minutes")

        except ValueError:
            await event.respond("‚ùå **Erreur**: Veuillez entrer un nombre valide de minutes")

    except Exception as e:
        print(f"Erreur dans set_prediction_interval: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/cooldown'))
async def set_cooldown_interval(event):
    """Configure le cooldown avant re-v√©rification des r√®gles (admin uniquement)"""
    global cooldown_interval
    try:
        if event.sender_id != ADMIN_ID:
            return

        # Parse command arguments
        message_parts = event.message.message.split()

        if len(message_parts) < 2:
            await event.respond(f"""‚è≥ **Configuration du Cooldown de V√©rification**

**Usage**: `/cooldown [secondes]`

**Cooldown actuel**: {cooldown_interval} secondes

**Description**:
D√©finit l'intervalle de temps en secondes avant que le bot ne recommence √† v√©rifier les r√®gles de pr√©diction apr√®s un traitement.

**Exemples**:
‚Ä¢ `/cooldown 5` - Attendre 5 secondes
‚Ä¢ `/cooldown 60` - Attendre 1 minute
‚Ä¢ `/cooldown 300` - Attendre 5 minutes

**Plage autoris√©e**: Entre 0 secondes et 20 minutes (1200 secondes)""")
            return

        try:
            new_cooldown = int(message_parts[1])
            if new_cooldown < 0 or new_cooldown > 1200:  # 0 sec √† 20 min
                await event.respond("‚ùå **Erreur**: Le cooldown doit √™tre entre 0 secondes et 1200 secondes (20 minutes)")
                return

            old_cooldown = cooldown_interval
            cooldown_interval = new_cooldown

            # Sauvegarder la configuration
            save_config()

            # Convertir en format lisible
            if new_cooldown < 60:
                time_display = f"{new_cooldown} secondes"
            else:
                minutes = new_cooldown // 60
                seconds = new_cooldown % 60
                if seconds == 0:
                    time_display = f"{minutes} minute(s)"
                else:
                    time_display = f"{minutes} minute(s) et {seconds} seconde(s)"

            await event.respond(f"""‚úÖ **Cooldown mis √† jour**

‚è≥ **Ancien cooldown**: {old_cooldown} secondes
‚è≥ **Nouveau cooldown**: {new_cooldown} secondes ({time_display})

Le bot attendra maintenant {time_display} avant de recommencer √† v√©rifier les r√®gles de pr√©diction.

Configuration sauvegard√©e automatiquement.""")

            print(f"‚úÖ Cooldown mis √† jour: {old_cooldown} ‚Üí {new_cooldown} secondes")

        except ValueError:
            await event.respond("‚ùå **Erreur**: Veuillez entrer un nombre valide de secondes")

    except Exception as e:
        print(f"Erreur dans set_cooldown_interval: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/diagnostic'))
async def run_diagnostic(event):
    """Diagnostic complet du syst√®me (admin uniquement)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        global scheduler
        timestamp = datetime.now().strftime("%H:%M:%S")

        # √âtat des canaux
        stat_status = "‚úÖ Configur√©" if detected_stat_channel else "‚ùå Non configur√©"
        display_status = "‚úÖ Configur√©" if detected_display_channel else "‚ùå Non configur√©"

        # √âtat du scheduler
        scheduler_status = "üü¢ Actif" if scheduler and scheduler.is_running else "üî¥ Inactif"

        # Pr√©dictions en cours
        active_predictions = len([s for s in predictor.prediction_status.values() if s == '‚åõ'])

        # Planification automatique
        auto_schedule_count = 0
        if scheduler and scheduler.schedule_data:
            auto_schedule_count = len(scheduler.schedule_data)

        diagnostic_msg = f"""üîç **DIAGNOSTIC SYST√àME** - {timestamp}

üìä **Configuration**:
‚Ä¢ Canal stats: {stat_status} ({detected_stat_channel})
‚Ä¢ Canal display: {display_status} ({detected_display_channel})
‚Ä¢ Cooldown: {cooldown_interval}s
‚Ä¢ Intervalle: {prediction_interval}min

ü§ñ **Scheduler Automatique**:
‚Ä¢ Statut: {scheduler_status}
‚Ä¢ Planifications: {auto_schedule_count}
‚Ä¢ Pr√©dictions actives: {active_predictions}

‚öôÔ∏è **Fonctionnement**:
‚Ä¢ Messages trait√©s: {len(predictor.processed_messages)}
‚Ä¢ En attente d'√©dition: {len(predictor.pending_edit_messages)}

üéØ **Test de Canal**:
‚Ä¢ Peut envoyer vers stats: {"‚úÖ" if detected_stat_channel else "‚ùå"}
‚Ä¢ Peut envoyer vers display: {"‚úÖ" if detected_display_channel else "‚ùå"}"""

        await event.respond(diagnostic_msg)

        # Test d'envoi vers le canal de diffusion
        if detected_display_channel:
            try:
                test_msg = f"üß™ Test automatique [{timestamp}] - Bot op√©rationnel"
                await client.send_message(detected_display_channel, test_msg)
                await event.respond("‚úÖ Test d'envoi vers canal de diffusion r√©ussi")
            except Exception as e:
                await event.respond(f"‚ùå √âchec test canal diffusion: {e}")

    except Exception as e:
        print(f"Erreur diagnostic: {e}")
        await event.respond(f"‚ùå Erreur diagnostic: {e}")

@client.on(events.NewMessage(pattern='/deploy'))
async def generate_deploy_package(event):
    """G√©n√®re le package de d√©ploiement zip40 optimis√© pour Render.com avec base YAML (admin uniquement)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        await event.respond("üöÄ **G√©n√©ration Package ZIP42 - Render.com + Base YAML + Cooldown Corrig√©...**")

        try:
            # Cr√©er le package ZIP avec nom zip42
            package_name = 'zip42.zip'

            with zipfile.ZipFile(package_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
                # Fichiers principaux actuels avec toutes les am√©liorations N3
                files_to_include = [
                    'main.py', 'predictor.py', 'yaml_manager.py', 'scheduler.py'
                ]

                for file_path in files_to_include:
                    if os.path.exists(file_path):
                        zipf.write(file_path)

                # Configuration .env.example pour Render.com
                env_content = f"""# Configuration ZIP42 - Render.com Deployment + Cooldown Corrig√©
API_ID=29177661
API_HASH=a8639172fa8d35dbfd8ea46286d349ab
BOT_TOKEN=8134202948:AAFUtAk6Fi0h2fMGERkLzU4UW9GJxdEE_ME
ADMIN_ID=1190237801
RENDER_DEPLOYMENT=true
PORT=10000
PREDICTION_INTERVAL={prediction_interval}
COOLDOWN_INTERVAL={cooldown_interval}"""
                zipf.writestr('.env.example', env_content)

                # requirements.txt pour Replit/Render (versions compatibles)
                requirements_content = """telethon==1.35.0
aiohttp==3.9.5
python-dotenv==1.0.1
pyyaml==6.0.1"""
                zipf.writestr('requirements.txt', requirements_content)

                # runtime.txt pour sp√©cifier la version Python
                runtime_content = "python-3.11.4"
                zipf.writestr('runtime.txt', runtime_content)

                # Documentation ZIP40 pour Render.com
                readme_zip42 = f"""# Package D√©ploiement ZIP42 - Render.com + Cooldown Corrig√©

## üöÄ Fonctionnalit√©s ZIP42:
‚úÖ **Syst√®me Cooldown**: Configurez l'intervalle entre v√©rifications avec /cooldown
‚úÖ **R√®gles J Strictes**: UN SEUL J dans le deuxi√®me groupe UNIQUEMENT
‚úÖ **V√©rification 3K**: Exactement 3 cartes dans le deuxi√®me groupe
‚úÖ **Format 3K**: Messages "üîµXXX üîµ3K: statut :‚è≥"
‚úÖ **√âditions Temps R√©el**: D√©tection ‚è∞‚Üíüî∞/‚úÖ avec traitement diff√©r√©
‚úÖ **Architecture YAML**: Persistance compl√®te sans PostgreSQL
‚úÖ **Offsets 3**: V√©rification ‚úÖ0Ô∏è‚É£, ‚úÖ1Ô∏è‚É£, ‚úÖ2Ô∏è‚É£, ‚úÖ3Ô∏è‚É£ ou ‚ùå
‚úÖ **Configuration Persistante**: Sauvegarde automatique JSON + YAML
‚úÖ **D√©ploiement Render.com**: Optimis√© pour d√©ploiement en production
‚úÖ **Base YAML**: Stockage sans PostgreSQL
‚úÖ **Port 10000**: Configuration serveur optimis√©e

## üîß Commandes Disponibles:
‚Ä¢ `/cooldown [0-1200]` - Configurer cooldown (0 secondes √† 20 minutes)
‚Ä¢ `/intervalle [1-60]` - Configurer d√©lai de pr√©diction
‚Ä¢ `/status` - √âtat complet du syst√®me
‚Ä¢ `/deploy` - G√©n√©rer package ZIP42
‚Ä¢ `/ni` - Informations syst√®me de pr√©diction
‚Ä¢ `/sta` - Statut des d√©clencheurs

## üìã R√®gles de D√©clenchement:
### ‚úÖ Pr√©diction g√©n√©r√©e SEULEMENT si:
- UN SEUL J dans le deuxi√®me groupe
- Message finalis√© avec üî∞ ou ‚úÖ
- Cooldown respect√© entre v√©rifications
- Exemple: (A‚ô†Ô∏è2‚ô•Ô∏è) - (6‚ô•Ô∏èJ‚ô†Ô∏è) ‚Üí üîµX üîµ3K: statut :‚è≥

### ‚ùå Pas de pr√©diction si:
- J dans le premier groupe: (J‚ô†Ô∏è2‚ô•Ô∏è) - (6‚ô•Ô∏è8‚ô†Ô∏è)
- Plusieurs J dans deuxi√®me: (A‚ô†Ô∏è2‚ô•Ô∏è) - (J‚ô•Ô∏èJ‚ô†Ô∏è)
- Aucun J: (A‚ô†Ô∏è2‚ô•Ô∏è) - (6‚ô•Ô∏è8‚ô†Ô∏è)
- Message avec ‚è∞ (en cours d'√©dition)
- Cooldown actif (√©vite spam)

### V√©rification des R√©sultats:
- Exactement 3 cartes dans deuxi√®me groupe ‚Üí V√©rification activ√©e
- Calcul des offsets 0, +1, +2, +3 par rapport √† la pr√©diction
- Mise √† jour automatique du statut dans le message original
- Gestion automatique des pr√©dictions expir√©es

## üóÑÔ∏è Architecture YAML ZIP42:
- `data/bot_config.yaml`: Configuration persistante
- `data/predictions.yaml`: Historique pr√©dictions 
- `data/auto_predictions.yaml`: Planification automatique
- `data/message_log.yaml`: Logs syst√®me
- `bot_config.json`: Backup configuration

## üåê D√©ploiement Render.com:
- Port: 10000 (obligatoire pour Render.com)
- Start Command: `python main.py`
- Build Command: `pip install -r requirements.txt`
- Variables: Pr√©-configur√©es dans .env.example
- Base YAML (sans PostgreSQL)

## üìä Syst√®me de Monitoring ZIP42:
- Health check: `http://0.0.0.0:10000/health`
- Status API: `http://0.0.0.0:10000/status`
- Logs d√©taill√©s avec timestamps
- Surveillance cooldown en temps r√©el

## üéØ Configuration ZIP42:
1. `/intervalle 3` - Pr√©dictions apr√®s 3 minutes
2. `/cooldown 30` - Attendre 30 secondes avant re-v√©rification
3. Render.com: Port 10000 automatiquement configur√©
4. Variables d'environnement pr√©-remplies
5. Base YAML dans dossier `data/`

## üöÄ D√©ploiement Render.com:
1. T√©l√©chargez zip40.zip
2. D√©compressez sur votre machine
3. Cr√©ez un nouveau service Web sur Render.com
4. Uploadez les fichiers ou connectez votre repo
5. Les variables sont d√©j√† dans .env.example
6. D√©ployez directement !

üöÄ Package ZIP42 pr√™t pour Render.com!"""
                zipf.writestr('README_ZIP42.md', readme_zip42)

                # Fichier de configuration Replit
                replit_config = """[deployments.replit]
build = ["pip", "install", "-r", "requirements.txt"]
run = ["python", "main.py"]

[web]
run = ["python", "main.py"]"""
                zipf.writestr('.replit', replit_config)

            file_size = os.path.getsize(package_name) / 1024

            # Envoyer le message de confirmation
            await event.respond(f"""‚úÖ **Package ZIP42 G√©n√©r√© avec Succ√®s!**

üì¶ **Fichier**: `{package_name}` ({file_size:.1f} KB)

üéØ **Fonctionnalit√©s ZIP42**:
‚Ä¢ Syst√®me de cooldown configurable (0s-20min) 
‚Ä¢ Optimis√© pour Render.com
‚Ä¢ Architecture YAML compl√®te (sans PostgreSQL)
‚Ä¢ Port 10000 pr√©-configur√©
‚Ä¢ Variables d'environnement incluses
‚Ä¢ R√®gles J strictes: UN SEUL dans deuxi√®me groupe
‚Ä¢ V√©rification 3K: exactement 3 cartes

üöÄ **Pr√™t pour Render.com**:
‚Ä¢ Variables d√©j√† configur√©es dans .env.example
‚Ä¢ Port 10000 optimis√©
‚Ä¢ Base YAML (dossier data/)
‚Ä¢ Health check int√©gr√©

**Package ZIP42 - D√©ploiement Render.com simplifi√© + Cooldown Corrig√©!**""")

            # Envoyer le fichier ZIP en pi√®ce jointe
            await client.send_file(
                event.chat_id,
                package_name,
                caption="üì¶ **Package ZIP42 - Render.com Ready** - Base YAML + Port 10000 + Cooldown Corrig√©"
            )

            print(f"‚úÖ Package ZIP42 g√©n√©r√©: {package_name} ({file_size:.1f} KB)")
            print(f"üìã Fichiers inclus: {len(files_to_include)} fichiers principaux + config")
            print(f"üöÄ Optimis√© pour Render.com avec base YAML")

        except Exception as e:
            await event.respond(f"‚ùå Erreur cr√©ation: {str(e)}")

    except Exception as e:
        print(f"Erreur deploy: {e}")

# --- TRAITEMENT DES MESSAGES DU CANAL DE STATISTIQUES ---
@client.on(events.NewMessage())
@client.on(events.MessageEdited())
async def handle_messages(event):
    """Handle messages from statistics channel"""
    global last_rule_check
    try:
        # Debug: Log ALL incoming messages first with timestamp
        timestamp = datetime.now().strftime("%H:%M:%S")
        message_text = event.message.message if event.message else "Pas de texte"
        logger.info(f"üì¨ MESSAGE RE√áU: Canal {event.chat_id} | Texte: {message_text[:100]}")

        # Log vers l'admin en cas de pr√©diction g√©n√©r√©e
        if detected_stat_channel and event.chat_id == detected_stat_channel:
            logger.info(f"üéØ Message du canal surveill√© d√©tect√©: {message_text[:200]}")
            try:
                await client.send_message(ADMIN_ID, f"[{timestamp}] üì® Message surveill√©: {message_text[:200]}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible d'envoyer log admin: {e}")

        # Check if stat channel is configured
        if detected_stat_channel is None:
            print("‚ö†Ô∏è PROBL√àME: Canal de statistiques non configur√©!")
            return

        # Check if message is from the configured channel
        if event.chat_id != detected_stat_channel:
            print(f"‚ùå Message ignor√©: Canal {event.chat_id} ‚â† Canal stats {detected_stat_channel}")
            return

        if not message_text:
            print("‚ùå Message vide ignor√©")
            return

        logger.info(f"‚úÖ TRAITEMENT MESSAGE: Canal {event.chat_id} - {message_text[:50]}...")

        # 1. V√©rifier si c'est un message en cours d'√©dition (‚è∞ ou üïê)
        is_pending, game_num = predictor.is_pending_edit_message(message_text)
        if is_pending:
            print(f"‚è≥ Message #{game_num} mis en attente d'√©dition finale")
            return  # Ignorer pour le moment, attendre l'√©dition finale

        # 2. V√©rifier le cooldown SEULEMENT pour la g√©n√©ration de nouvelles pr√©dictions
        current_time = datetime.now()
        cooldown_active = False
        if last_rule_check is not None:
            time_since_last_check = (current_time - last_rule_check).total_seconds()
            if time_since_last_check < cooldown_interval:
                cooldown_active = True
                remaining_cooldown = cooldown_interval - time_since_last_check
                logger.debug(f"‚è≥ Cooldown actif: {remaining_cooldown:.1f}s restantes - Nouvelles pr√©dictions bloqu√©es")

        # 3. V√©rifier si c'est l'√©dition finale d'un message en attente (üî∞ ou ‚úÖ)
        predicted, predicted_game, suit = predictor.process_final_edit_message(message_text)
        if predicted and not cooldown_active:
            logger.info(f"üéØ √âDITION FINALE D√âTECT√âE - G√©n√©ration pr√©diction #{predicted_game}")
            # Message de pr√©diction selon le nouveau format
            prediction_text = f"üîµ{predicted_game} üîµ3K: statut :‚è≥"

            sent_messages = await broadcast(prediction_text)

            # Store message IDs for later editing
            if sent_messages and predicted_game:
                for chat_id, message_id in sent_messages:
                    predictor.store_prediction_message(predicted_game, message_id, chat_id)

            # Mettre √† jour le timestamp SEULEMENT apr√®s g√©n√©ration d'une pr√©diction
            last_rule_check = current_time
            logger.info(f"‚úÖ PR√âDICTION G√âN√âR√âE APR√àS √âDITION pour #{predicted_game}: {suit}")
        elif predicted and cooldown_active:
            logger.info(f"‚è≥ Pr√©diction apr√®s √©dition bloqu√©e par cooldown pour #{predicted_game}")
        else:
            # 4. Traitement normal des messages (pas d'√©dition en cours)
            predicted, predicted_game, suit = predictor.should_predict(message_text)
            if predicted and not cooldown_active:
                logger.info(f"üöÄ R√àGLE D√âTECT√âE - G√©n√©ration pr√©diction #{predicted_game}")
                # Message de pr√©diction manuelle selon le nouveau format demand√©
                prediction_text = f"üîµ{predicted_game} üîµ3K: statut :‚è≥"

                sent_messages = await broadcast(prediction_text)

                # Store message IDs for later editing
                if sent_messages and predicted_game:
                    for chat_id, message_id in sent_messages:
                        predictor.store_prediction_message(predicted_game, message_id, chat_id)

                # Mettre √† jour le timestamp SEULEMENT apr√®s g√©n√©ration d'une pr√©diction
                last_rule_check = current_time
                logger.info(f"‚úÖ PR√âDICTION MANUELLE LANC√âE pour #{predicted_game}: {suit}")
            elif predicted and cooldown_active:
                logger.info(f"‚è≥ Pr√©diction manuelle bloqu√©e par cooldown pour #{predicted_game}")
            else:
                logger.debug(f"‚ÑπÔ∏è Aucune r√®gle d√©clench√©e pour le message #{predictor.extract_game_number(message_text)}")

        # Check for prediction verification (manuel + automatique)
        verified, number = predictor.verify_prediction(message_text)
        if verified is not None and number is not None:
            statut = predictor.prediction_status.get(number, 'Inconnu')
            logger.info(f"üîç V√âRIFICATION PR√âDICTION #{number} - Statut: {statut}")
            # Edit the original prediction message instead of sending new message
            success = await edit_prediction_message(number, statut)
            if success:
                logger.info(f"‚úÖ MESSAGE MIS √Ä JOUR #{number}: {statut}")
            else:
                logger.warning(f"‚ö†Ô∏è √âchec mise √† jour message #{number}, envoi nouveau message")
                status_text = f"üîµ{number} üîµ3K: statut :{statut}"
                await broadcast(status_text)

        # Check for expired predictions on every valid result message
        game_number = predictor.extract_game_number(message_text)
        if game_number and not ("‚è∞" in message_text or "üïê" in message_text):
            expired = predictor.check_expired_predictions(game_number)
            for expired_num in expired:
                # Edit expired prediction messages
                success = await edit_prediction_message(expired_num, '‚ùå')
                if success:
                    print(f"‚úÖ Message de pr√©diction expir√©e #{expired_num} mis √† jour avec ‚ùå")
                else:
                    print(f"‚ö†Ô∏è Impossible de mettre √† jour le message expir√© #{expired_num}")
                    status_text = f"üîµ{expired_num} üîµ3K: statut :‚ùå"
                    await broadcast(status_text)

        # V√©rification des pr√©dictions automatiques du scheduler
        if scheduler and scheduler.schedule_data:
            # R√©cup√®re les num√©ros des pr√©dictions automatiques en attente
            pending_auto_predictions = []
            for numero_str, data in scheduler.schedule_data.items():
                if data["launched"] and not data["verified"]:
                    numero_int = int(numero_str.replace('N', ''))
                    pending_auto_predictions.append(numero_int)

            if pending_auto_predictions:
                # V√©rifie si ce message correspond √† une pr√©diction automatique
                predicted_num, status = scheduler.verify_prediction_from_message(message_text, pending_auto_predictions)

                if predicted_num and status:
                    # Met √† jour la pr√©diction automatique
                    numero_str = f"N{predicted_num:03d}"
                    if numero_str in scheduler.schedule_data:
                        data = scheduler.schedule_data[numero_str]
                        data["verified"] = True
                        data["statut"] = status

                        # Met √† jour le message
                        await scheduler.update_prediction_message(numero_str, data, status)

                        # Ajouter une nouvelle pr√©diction pour maintenir la continuit√©
                        scheduler.add_next_prediction()

                        # Sauvegarde
                        scheduler.save_schedule(scheduler.schedule_data)
                        print(f"üìù Pr√©diction automatique {numero_str} v√©rifi√©e: {status}")
                        print(f"üîÑ Nouvelle pr√©diction g√©n√©r√©e pour maintenir la continuit√©")

        # Bilan automatique supprim√© sur demande utilisateur

    except Exception as e:
        print(f"Erreur dans handle_messages: {e}")

async def broadcast(message):
    """Broadcast message to display channel"""
    global detected_display_channel

    sent_messages = []
    if detected_display_channel:
        try:
            sent_message = await client.send_message(detected_display_channel, message)
            sent_messages.append((detected_display_channel, sent_message.id))
            logger.info(f"üì§ MESSAGE DIFFUS√â: {message}")
        except Exception as e:
            logger.error(f"‚ùå Erreur diffusion: {e}")
    else:
        logger.warning("‚ö†Ô∏è Canal d'affichage non configur√©")

    return sent_messages

async def edit_prediction_message(game_number: int, new_status: str):
    """Edit prediction message with new status"""
    try:
        message_info = predictor.get_prediction_message(game_number)
        if message_info:
            chat_id = message_info['chat_id']
            message_id = message_info['message_id']
            new_text = f"üîµ{game_number} üîµ3K: statut :{new_status}"

            await client.edit_message(chat_id, message_id, new_text)
            print(f"Message de pr√©diction #{game_number} mis √† jour avec statut: {new_status}")
            return True
    except Exception as e:
        print(f"Erreur lors de la modification du message: {e}")
    return False

# Code de g√©n√©ration de rapport supprim√© selon demande utilisateur

# --- ENVOI VERS LES CANAUX ---
# (Function moved above to handle message editing)

# --- GESTION D'ERREURS ET RECONNEXION ---
async def handle_connection_error():
    """Handle connection errors and attempt reconnection"""
    print("Tentative de reconnexion...")
    await asyncio.sleep(5)
    try:
        await client.connect()
        print("Reconnexion r√©ussie")
    except Exception as e:
        print(f"√âchec de la reconnexion: {e}")

# --- SERVEUR WEB POUR MONITORING ---
async def health_check(request):
    """Health check endpoint"""
    logger.info("üìä Health check acc√©d√©")
    return web.Response(text="Bot is running!", status=200)

async def bot_status(request):
    """Bot status endpoint"""
    status = {
        "bot_online": True,
        "stat_channel": detected_stat_channel,
        "display_channel": detected_display_channel,
        "predictions_active": len(predictor.prediction_status),
        "total_predictions": len(predictor.status_log),
        "cooldown_interval": cooldown_interval,
        "prediction_interval": prediction_interval,
        "scheduler_running": scheduler.is_running if scheduler else False
    }
    logger.info(f"üìä Status API acc√©d√©: {status}")
    return web.json_response(status)

async def create_web_server():
    """Create and start web server"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    app.router.add_get('/status', bot_status)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    print(f"‚úÖ Serveur web d√©marr√© sur 0.0.0.0:{PORT}")
    return runner

# --- LANCEMENT ---
async def main():
    """Main function to start the bot"""
    print("D√©marrage du bot Telegram...")
    print(f"API_ID: {API_ID}")
    print(f"Bot Token configur√©: {'Oui' if BOT_TOKEN else 'Non'}")
    print(f"Port web: {PORT}")

    # Validate configuration
    if not API_ID or not API_HASH or not BOT_TOKEN:
        print("‚ùå Configuration manquante! V√©rifiez votre fichier .env")
        return

    try:
        # Start web server first
        web_runner = await create_web_server()
        logger.info(f"üåê Serveur web d√©marr√© sur port {PORT}")

        # Start the bot
        if await start_bot():
            logger.info("‚úÖ BOT OP√âRATIONNEL - En attente de messages...")
            logger.info(f"üåê Health check: http://0.0.0.0:{PORT}/health")
            await client.run_until_disconnected()
        else:
            logger.error("‚ùå √âCHEC DU D√âMARRAGE DU BOT")

    except KeyboardInterrupt:
        print("\nüõë Arr√™t du bot demand√© par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")
        await handle_connection_error()
    finally:
        try:
            await client.disconnect()
            print("Bot d√©connect√© proprement")
        except:
            pass

if __name__ == "__main__":
    asyncio.run(main())